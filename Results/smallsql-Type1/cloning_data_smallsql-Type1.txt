{
 "Type-1": {
  "NumberOfFilesWithDuplicatedCode": 14,
  "LineCountOfFiles": {
   "smallsql0.21_src": 24853
  },
  "BiggestCloneClassLineSize": "21",
  "NumberOfClonesClasses": 94,
  "NumberOfDuplicatedLinesPerFile": {
   "smallsql0.21_src/src/smallsql/junit/TestAlterTable2.java": 14,
   "smallsql0.21_src/src/smallsql/database/IndexDescription.java": 6,
   "smallsql0.21_src/src/smallsql/junit/TestStatement.java": 18,
   "smallsql0.21_src/src/smallsql/junit/TestAlterTable.java": 10,
   "smallsql0.21_src/src/smallsql/junit/TestOperatoren.java": 119,
   "smallsql0.21_src/src/smallsql/database/TableView.java": 6,
   "smallsql0.21_src/src/smallsql/database/LongTreeList.java": 22,
   "smallsql0.21_src/src/smallsql/junit/TestScrollable.java": 32,
   "smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java": 16,
   "smallsql0.21_src/src/smallsql/junit/BenchTest.java": 119,
   "smallsql0.21_src/src/smallsql/junit/TestTransactions.java": 60,
   "smallsql0.21_src/src/smallsql/junit/TestJoins.java": 27,
   "smallsql0.21_src/src/smallsql/junit/TestResultSet.java": 58,
   "smallsql0.21_src/src/smallsql/junit/TestOrderBy.java": 235
  },
  "PercentageOfDuplicatedLines": "2.98555506400%",
  "BiggestCloneClassInMembers": [
   "smallsql0.21_src/src/smallsql/junit/TestOrderBy.java(304,312)",
   "smallsql0.21_src/src/smallsql/junit/TestOrderBy.java(116,124)"
  ],
  "BiggestCloneClassMemberCount": 12,
  "TotalLineCountOfFolder": 24853,
  "ExampleClones": [
   {
    "SourceCode": "[\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[stringLiteral(\\\"\\\\\\\"getRow\\\\\\\"\\\"),number(\\\"1\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"getRow\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"isLast\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isLast\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertFalse\\\"),[stringLiteral(\\\"\\\\\\\"next\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"next\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertFalse\\\"),[stringLiteral(\\\"\\\\\\\"isBeforeFirst\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isBeforeFirst\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"isAfterLast\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isAfterLast\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[stringLiteral(\\\"\\\\\\\"getRow\\\\\\\"\\\"),number(\\\"0\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"getRow\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"first\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"first\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[stringLiteral(\\\"\\\\\\\"getRow\\\\\\\"\\\"),number(\\\"1\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"getRow\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertFalse\\\"),[stringLiteral(\\\"\\\\\\\"previous\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"previous\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[stringLiteral(\\\"\\\\\\\"getRow\\\\\\\"\\\"),number(\\\"0\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"getRow\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"isBeforeFirst\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isBeforeFirst\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertFalse\\\"),[stringLiteral(\\\"\\\\\\\"isAfterLast\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isAfterLast\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"last\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"last\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[stringLiteral(\\\"\\\\\\\"getRow\\\\\\\"\\\"),number(\\\"1\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"getRow\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"isLast\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isLast\\\"),[])]))\",\"expressionStatement(methodCall(id(\\\"rs\\\"),[],id(\\\"afterLast\\\"),[]))\",\"expressionStatement(methodCall([],id(\\\"assertFalse\\\"),[stringLiteral(\\\"\\\\\\\"isBeforeFirst\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isBeforeFirst\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"isAfterLast\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isAfterLast\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[stringLiteral(\\\"\\\\\\\"getRow\\\\\\\"\\\"),number(\\\"0\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"getRow\\\"),[])]))\"]",
    "Pair1": "smallsql0.21_src/src/smallsql/junit/TestResultSet.java(128,150)",
    "Pair2": "smallsql0.21_src/src/smallsql/junit/TestResultSet.java(85,107)",
    "NumberOfLines": "19"
   },
   {
    "SourceCode": "[\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[stringLiteral(\\\"\\\\\\\"getRow\\\\\\\"\\\"),number(\\\"1\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"getRow\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"isLast\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isLast\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertFalse\\\"),[stringLiteral(\\\"\\\\\\\"next\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"next\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertFalse\\\"),[stringLiteral(\\\"\\\\\\\"isBeforeFirst\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isBeforeFirst\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"isAfterLast\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isAfterLast\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[stringLiteral(\\\"\\\\\\\"getRow\\\\\\\"\\\"),number(\\\"0\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"getRow\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"first\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"first\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[stringLiteral(\\\"\\\\\\\"getRow\\\\\\\"\\\"),number(\\\"1\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"getRow\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertFalse\\\"),[stringLiteral(\\\"\\\\\\\"previous\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"previous\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[stringLiteral(\\\"\\\\\\\"getRow\\\\\\\"\\\"),number(\\\"0\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"getRow\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"isBeforeFirst\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isBeforeFirst\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertFalse\\\"),[stringLiteral(\\\"\\\\\\\"isAfterLast\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isAfterLast\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"last\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"last\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[stringLiteral(\\\"\\\\\\\"getRow\\\\\\\"\\\"),number(\\\"1\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"getRow\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"isLast\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isLast\\\"),[])]))\",\"expressionStatement(methodCall(id(\\\"rs\\\"),[],id(\\\"afterLast\\\"),[]))\",\"expressionStatement(methodCall([],id(\\\"assertFalse\\\"),[stringLiteral(\\\"\\\\\\\"isBeforeFirst\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isBeforeFirst\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[stringLiteral(\\\"\\\\\\\"isAfterLast\\\\\\\"\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"isAfterLast\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[stringLiteral(\\\"\\\\\\\"getRow\\\\\\\"\\\"),number(\\\"0\\\"),methodCall(id(\\\"rs\\\"),[],id(\\\"getRow\\\"),[])]))\"]",
    "Pair1": "smallsql0.21_src/src/smallsql/junit/TestResultSet.java(85,107)",
    "Pair2": "smallsql0.21_src/src/smallsql/junit/TestResultSet.java(128,150)",
    "NumberOfLines": "19"
   },
   {
    "SourceCode": "[\"expressionStatement(methodCall([],id(\\\"init\\\"),[]))\",\"declarationStatement(variables([],simpleType(id(\\\"Connection\\\")),[variable(id(\\\"con\\\"),[],methodCall(id(\\\"AllTests\\\"),[],id(\\\"getConnection\\\"),[]))]))\",\"declarationStatement(variables([],simpleType(id(\\\"Statement\\\")),[variable(id(\\\"st\\\"),[],methodCall(id(\\\"con\\\"),[],id(\\\"createStatement\\\"),[]))]))\",\"declarationStatement(variables([],simpleType(id(\\\"ResultSet\\\")),[variable(id(\\\"rs\\\"),[])]))\",\"declarationStatement(variables([],simpleType(id(\\\"String\\\")),[variable(id(\\\"oldValue\\\"),[])]))\",\"expressionStatement(assignment(id(\\\"rs\\\"),\\\"=\\\",methodCall(id(\\\"st\\\"),[],id(\\\"executeQuery\\\"),[plus(stringLiteral(\\\"\\\\\\\"SELECT * FROM \\\\\\\"\\\"),id(\\\"table1\\\"))])))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[methodCall(id(\\\"rs\\\"),[],id(\\\"next\\\"),[])]))\",\"expressionStatement(assignment(id(\\\"oldValue\\\"),\\\"=\\\",methodCall(id(\\\"rs\\\"),[],id(\\\"getString\\\"),[stringLiteral(\\\"\\\\\\\"v\\\\\\\"\\\")])))\",\"declarationStatement(variables([],int(),[variable(id(\\\"count\\\"),[],number(\\\"1\\\"))]))\",\"while(conditionalAnd(notEquals(id(\\\"oldValue\\\"),null()),methodCall(id(\\\"rs\\\"),[],id(\\\"next\\\"),[])),block([declarationStatement(variables([],simpleType(id(\\\"String\\\")),[variable(id(\\\"newValue\\\"),[],methodCall(id(\\\"rs\\\"),[],id(\\\"getString\\\"),[stringLiteral(\\\"\\\\\\\"v\\\\\\\"\\\")]))])),if(notEquals(id(\\\"newValue\\\"),null()),block([expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[greater(methodCall(id(\\\"oldValue\\\"),[],id(\\\"compareTo\\\"),[id(\\\"newValue\\\")]),number(\\\"0\\\"))])),expressionStatement(postIncrement(id(\\\"count\\\")))])),expressionStatement(assignment(id(\\\"oldValue\\\"),\\\"=\\\",id(\\\"newValue\\\")))]))\",\"expressionStatement(methodCall([],id(\\\"assertNull\\\"),[id(\\\"oldValue\\\")]))\",\"expressionStatement(methodCall([],id(\\\"assertFalse\\\"),[methodCall(id(\\\"rs\\\"),[],id(\\\"next\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[id(\\\"valueCount\\\"),id(\\\"count\\\")]))\"]",
    "Pair1": "smallsql0.21_src/src/smallsql/junit/TestOrderBy.java(227,250)",
    "Pair2": "smallsql0.21_src/src/smallsql/junit/TestOrderBy.java(199,222)",
    "NumberOfLines": "13"
   },
   {
    "SourceCode": "[\"expressionStatement(methodCall([],id(\\\"init\\\"),[]))\",\"declarationStatement(variables([],simpleType(id(\\\"Connection\\\")),[variable(id(\\\"con\\\"),[],methodCall(id(\\\"AllTests\\\"),[],id(\\\"getConnection\\\"),[]))]))\",\"declarationStatement(variables([],simpleType(id(\\\"Statement\\\")),[variable(id(\\\"st\\\"),[],methodCall(id(\\\"con\\\"),[],id(\\\"createStatement\\\"),[]))]))\",\"declarationStatement(variables([],simpleType(id(\\\"ResultSet\\\")),[variable(id(\\\"rs\\\"),[])]))\",\"declarationStatement(variables([],simpleType(id(\\\"String\\\")),[variable(id(\\\"oldValue\\\"),[])]))\",\"expressionStatement(assignment(id(\\\"rs\\\"),\\\"=\\\",methodCall(id(\\\"st\\\"),[],id(\\\"executeQuery\\\"),[plus(stringLiteral(\\\"\\\\\\\"SELECT * FROM \\\\\\\"\\\"),id(\\\"table1\\\"))])))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[methodCall(id(\\\"rs\\\"),[],id(\\\"next\\\"),[])]))\",\"expressionStatement(assignment(id(\\\"oldValue\\\"),\\\"=\\\",methodCall(id(\\\"rs\\\"),[],id(\\\"getString\\\"),[stringLiteral(\\\"\\\\\\\"v\\\\\\\"\\\")])))\",\"declarationStatement(variables([],int(),[variable(id(\\\"count\\\"),[],number(\\\"1\\\"))]))\",\"while(conditionalAnd(notEquals(id(\\\"oldValue\\\"),null()),methodCall(id(\\\"rs\\\"),[],id(\\\"next\\\"),[])),block([declarationStatement(variables([],simpleType(id(\\\"String\\\")),[variable(id(\\\"newValue\\\"),[],methodCall(id(\\\"rs\\\"),[],id(\\\"getString\\\"),[stringLiteral(\\\"\\\\\\\"v\\\\\\\"\\\")]))])),if(notEquals(id(\\\"newValue\\\"),null()),block([expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[greater(methodCall(id(\\\"oldValue\\\"),[],id(\\\"compareTo\\\"),[id(\\\"newValue\\\")]),number(\\\"0\\\"))])),expressionStatement(postIncrement(id(\\\"count\\\")))])),expressionStatement(assignment(id(\\\"oldValue\\\"),\\\"=\\\",id(\\\"newValue\\\")))]))\",\"expressionStatement(methodCall([],id(\\\"assertNull\\\"),[id(\\\"oldValue\\\")]))\",\"expressionStatement(methodCall([],id(\\\"assertFalse\\\"),[methodCall(id(\\\"rs\\\"),[],id(\\\"next\\\"),[])]))\",\"expressionStatement(methodCall([],id(\\\"assertEquals\\\"),[id(\\\"valueCount\\\"),id(\\\"count\\\")]))\"]",
    "Pair1": "smallsql0.21_src/src/smallsql/junit/TestOrderBy.java(199,222)",
    "Pair2": "smallsql0.21_src/src/smallsql/junit/TestOrderBy.java(227,250)",
    "NumberOfLines": "13"
   },
   {
    "SourceCode": "[\"expressionStatement(methodCall([],id(\\\"init\\\"),[]))\",\"declarationStatement(variables([],simpleType(id(\\\"Connection\\\")),[variable(id(\\\"con\\\"),[],methodCall(id(\\\"AllTests\\\"),[],id(\\\"getConnection\\\"),[]))]))\",\"declarationStatement(variables([],simpleType(id(\\\"Statement\\\")),[variable(id(\\\"st\\\"),[],methodCall(id(\\\"con\\\"),[],id(\\\"createStatement\\\"),[]))]))\",\"declarationStatement(variables([],simpleType(id(\\\"ResultSet\\\")),[variable(id(\\\"rs\\\"),[])]))\",\"declarationStatement(variables([],simpleType(id(\\\"String\\\")),[variable(id(\\\"oldValue\\\"),[])]))\",\"expressionStatement(assignment(id(\\\"rs\\\"),\\\"=\\\",methodCall(id(\\\"st\\\"),[],id(\\\"executeQuery\\\"),[plus(stringLiteral(\\\"\\\\\\\"SELECT * FROM \\\\\\\"\\\"),id(\\\"table1\\\"))])))\",\"expressionStatement(methodCall([],id(\\\"assertTrue\\\"),[methodCall(id(\\\"rs\\\"),[],id(\\\"next\\\"),[])]))\",\"expressionStatement(assignment(id(\\\"oldValue\\\"),\\\"=\\\",methodCall(id(\\\"rs\\\"),[],id(\\\"getString\\\"),[stringLiteral(\\\"\\\\\\\"v\\\\\\\"\\\")])))\"]",
    "Pair1": "smallsql0.21_src/src/smallsql/junit/TestOrderBy.java(144,154)",
    "Pair2": "smallsql0.21_src/src/smallsql/junit/TestOrderBy.java(199,208)",
    "NumberOfLines": "8"
   }
  ],
  "TotalNumberOfClonePairs": 742.0,
  "BiggestCloneClassInLines": "[\"smallsql0.21_src/src/smallsql/junit/TestOrderBy.java(699,725)\",\"smallsql0.21_src/src/smallsql/junit/TestOperatoren.java(115,141)\",\"smallsql0.21_src/src/smallsql/junit/TestJoins.java(129,155)\",\"smallsql0.21_src/src/smallsql/junit/TestOrderBy.java(730,756)\"]"
 }
}